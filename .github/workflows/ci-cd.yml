name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  validate-config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate configuration files
        run: |
          cd pyeon
          # 필수 설정 파일 확인
          if [ ! -f Dockerfile ]; then
            echo "Error: Dockerfile이 없습니다!"
            exit 1
          fi
          if [ ! -f docker-compose.prod.yml ]; then
            echo "Error: docker-compose.prod.yml 파일이 없습니다!"
            exit 1
          fi
          if [ ! -f docker-compose.blue.yml ]; then
            echo "Error: docker-compose.blue.yml 파일이 없습니다!"
            exit 1
          fi
          if [ ! -f docker-compose.green.yml ]; then
            echo "Error: docker-compose.green.yml 파일이 없습니다!"
            exit 1
          fi
          if [ ! -f deploy-blue-green.sh ]; then
            echo "Error: deploy-blue-green.sh 파일이 없습니다!"
            exit 1
          fi
          if [ ! -f nginx.conf ]; then
            echo "Error: nginx.conf 파일이 없습니다!"
            exit 1
          fi

  build-and-test:
    needs: validate-config
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Setup Gradle
        run: |
          cd pyeon
          gradle wrapper

      - name: Grant execute permission for gradlew
        run: chmod +x ./pyeon/gradlew

      - name: Build with Gradle
        run: |
          cd pyeon
          ./gradlew clean build --stacktrace

      - name: Run tests
        run: |
          cd pyeon
          ./gradlew test --stacktrace

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: pyeon/build/libs/*.jar

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: pyeon/build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./pyeon
          push: true
          tags: chisae/pyeondongbu-app:latest
          cache-from: type=registry,ref=chisae/pyeondongbu-app:latest
          cache-to: type=inline

  deploy:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.pyeondongbu.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy deployment files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: 22
          source: "pyeon/deploy-blue-green.sh,pyeon/docker-compose.prod.yml,pyeon/docker-compose.blue.yml,pyeon/docker-compose.green.yml,pyeon/nginx.conf,pyeon/prometheus.yml"
          target: "/tmp"
          strip_components: 1

      - name: Move files to app directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: 22
          debug: true
          script: |
            mkdir -p /app
            cp /tmp/deploy-blue-green.sh /tmp/docker-compose.prod.yml /tmp/docker-compose.blue.yml /tmp/docker-compose.green.yml /tmp/nginx.conf /tmp/prometheus.yml /app/
            chmod +x /app/deploy-blue-green.sh

            # Prometheus 접근 제한을 위한 .htpasswd 파일 생성
            apt-get update && apt-get install -y apache2-utils
            mkdir -p /etc/nginx
            htpasswd -bc /etc/nginx/.htpasswd.prometheus admin ${{ secrets.PROMETHEUS_PASSWORD || 'admin123' }}

      - name: Create .env file on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: 22
          debug: true
          script: |
            cd /app
            cat > .env << 'EOL'
            # Database
            PROD_DB_HOST=app-db-1
            PROD_DB_PORT=3306
            PROD_DB_NAME=pyeon
            PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}
            PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}

            # Google OAuth
            PROD_GOOGLE_CLIENT_ID=${{ secrets.PROD_GOOGLE_CLIENT_ID }}
            PROD_GOOGLE_CLIENT_SECRET=${{ secrets.PROD_GOOGLE_CLIENT_SECRET }}
            PROD_GOOGLE_REDIRECT_URI=${{ secrets.PROD_GOOGLE_REDIRECT_URI }}

            # Redis
            PROD_REDIS_HOST=app-redis-1
            PROD_REDIS_PORT=6379
            PROD_REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD }}

            # AWS
            PROD_AWS_ACCESS_KEY=${{ secrets.PROD_AWS_ACCESS_KEY }}
            PROD_AWS_SECRET_KEY=${{ secrets.PROD_AWS_SECRET_KEY }}
            PROD_AWS_REGION=${{ secrets.PROD_AWS_REGION }}
            PROD_S3_BUCKET=${{ secrets.PROD_S3_BUCKET }}
            PROD_S3_FOLDER=${{ secrets.PROD_S3_FOLDER }}

            # CORS
            PROD_CORS_ORIGIN=${{ secrets.PROD_CORS_ORIGIN }}

            # JWT
            PROD_JWT_SECRET_KEY=${{ secrets.PROD_JWT_SECRET_KEY }}
            PROD_JWT_ACCESS_EXPIRATION=3600000
            PROD_JWT_REFRESH_EXPIRATION=86400000

            # Server
            PROD_SERVER_PORT=8080

            # Domain
            PROD_DOMAIN=api.pyeondongbu.com
            PROD_FRONTEND_URL=${{ secrets.PROD_FRONTEND_URL }}
            PROD_FRONTEND_CALLBACK_URI=${{ secrets.PROD_FRONTEND_URL }}/auth/callback

            # Grafana
            GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
            EOL
            chmod 600 .env

      - name: Deploy to production server with Blue-Green deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: 22
          debug: true
          script: |
            cd /app
            chmod +x ./deploy-blue-green.sh
            ./deploy-blue-green.sh

      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: 22
          debug: true
          script: |
            # 배포 후 서비스 상태 확인
            # 여러 방법으로 서비스 상태 확인 시도
            echo "서비스 상태 확인 중..."

            # 1. 블루/그린 컨테이너 상태 확인
            BLUE_STATUS=$(docker ps --filter "name=app-blue" --format "{{.Status}}" | grep -E 'Up|running' || echo "none")
            GREEN_STATUS=$(docker ps --filter "name=app-green" --format "{{.Status}}" | grep -E 'Up|running' || echo "none")
            APP_STATUS=$(docker ps --filter "name=app-app" --format "{{.Status}}" | grep -E 'Up|running' || echo "none")

            # 2. 모니터링 컨테이너 상태 확인
            PROMETHEUS_STATUS=$(docker ps --filter "name=app-prometheus-1" --format "{{.Status}}" | grep -E 'Up|running' || echo "none")
            GRAFANA_STATUS=$(docker ps --filter "name=app-grafana-1" --format "{{.Status}}" | grep -E 'Up|running' || echo "none")

            # 3. 상태 출력
            echo "블루 환경 상태: $BLUE_STATUS"
            echo "그린 환경 상태: $GREEN_STATUS"
            echo "앱 컨테이너 상태: $APP_STATUS"
            echo "Prometheus 상태: $PROMETHEUS_STATUS"
            echo "Grafana 상태: $GRAFANA_STATUS"

            # 4. 로컬 포트 확인
            LOCAL_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081 || curl -s -o /dev/null -w "%{http_code}" http://localhost:8082 || echo "000")
            if [ "$LOCAL_CHECK" != "000" ]; then
              echo "로컬 포트 접근 가능: $LOCAL_CHECK"
            else
              echo "로컬 포트 접근 불가"
            fi

            # 5. Nginx 상태 확인
            NGINX_STATUS=$(docker ps --filter "name=app-nginx-1" --format "{{.Status}}" | grep -E 'Up|running' || echo "none")
            if [ "$NGINX_STATUS" == "none" ]; then
              echo "Nginx가 실행 중이지 않습니다."
            else
              echo "Nginx 실행 중"
            fi

            # 6. 도메인 접근 시도 (타임아웃 감소)
            DOMAIN_CHECK=$(curl -s --connect-timeout 5 -o /dev/null -w "%{http_code}" https://api.pyeondongbu.com || echo "000")
            echo "도메인 접근 상태: $DOMAIN_CHECK"

            # 7. 최종 판단: 
            # - 블루 또는 그린 환경 중 하나라도 실행 중이면 성공
            # - 또는 모니터링 컨테이너가 모두 실행 중이면 성공
            if [ "$BLUE_STATUS" != "none" ] || [ "$GREEN_STATUS" != "none" ] || [ "$APP_STATUS" != "none" ]; then
              echo "애플리케이션 서비스가 정상적으로 배포되었습니다."
              exit 0
            elif [ "$PROMETHEUS_STATUS" != "none" ] && [ "$GRAFANA_STATUS" != "none" ]; then
              echo "모니터링 시스템이 정상적으로 배포되었습니다. 애플리케이션 컨테이너는 확인이 필요합니다."
              exit 0
            else
              echo "서비스 배포 실패: 애플리케이션 및 모니터링 컨테이너가 실행되지 않습니다."
              exit 1
            fi
